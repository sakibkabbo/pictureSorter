/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package picturesorter; //remove this package declaration when conducting external testing.

import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.time.Instant;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.TransferHandler;

/**
 *
 * @author Muhtasim
 */
public class image_Classification_v2 extends javax.swing.JFrame {

    /**
     * Creates new form image_Classification
     */
    public image_Classification_v2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picturesorter/folder.png"))); // NOI18N
        jButton1.setText("Clouds");
        jButton1.setContentAreaFilled(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setIconTextGap(0);
        jButton1.setInheritsPopupMenu(true);
        jButton1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picturesorter/folder.png"))); // NOI18N
        jButton2.setText("Man Made Object");
        jButton2.setContentAreaFilled(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setIconTextGap(0);
        jButton2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picturesorter/folder.png"))); // NOI18N
        jButton3.setText("Visible Text");
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setIconTextGap(0);
        jButton3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Enlarge Image");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(295, 295, 295)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 313, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (current_photo_index == 3) {
            Instant i = Instant.now();
            startTime = i.getEpochSecond();
        }
        movePhoto(categoryFolder1);
        setNextPhoto();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (current_photo_index == 3) {
            Instant i = Instant.now();
            startTime = i.getEpochSecond();
        }
        movePhoto(categoryFolder3);
        setNextPhoto();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (current_photo_index == 3) {
            Instant i = Instant.now();
            startTime = i.getEpochSecond();
        }
        movePhoto(categoryFolder2);
        setNextPhoto();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (current_photo_index < photo_count) {
            Image i = new ImageIcon(photoURLs.get(current_photo_index)).getImage();
            Image i2 = i.getScaledInstance(1500, 900, java.awt.Image.SCALE_SMOOTH);
            ImageIcon pic1 = new ImageIcon(i2);
            enlargedImage en = new enlargedImage();
            en.jLabel1.setIcon(pic1);
            en.setVisible(true);
            en.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * Gets the photo files of the specified folder and stores them in an array
     * list. Warning: Folder must contain only jpg photos as only jpgs are
     * detected by the program.
     */
    public static void getPhotos() {
        photoFolder = new File("C:\\Users\\Muhtasim\\Documents\\U of T\\work\\pictureSorter\\Photos");
        for (File i : photoFolder.listFiles()) {
            if (i.isFile() && i.getName().contains(".jpg")) {
                try {
                    photoURLs.add(i.toURI().toURL());
                } catch (MalformedURLException ex) {
                    Logger.getLogger(image_Classification_v2.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        photo_count = photoURLs.size();
    }

    /**
     * Sets the next photo in the folder on screen and the following photo as
     * preview below. When the experiment is complete the start time, end time
     * and total time of the experiment is printed in the console.
     */
    public static void setNextPhoto() {
        if (current_photo_index + 1 < photo_count) {
            current_photo_index++;
            Image i = new ImageIcon(photoURLs.get(current_photo_index)).getImage();
            Image i2 = i.getScaledInstance(500, 500, java.awt.Image.SCALE_SMOOTH);
            ImageIcon pic1 = new ImageIcon(i2);
            jLabel1.setIcon(pic1);
            if (current_photo_index + 1 < photo_count) {
                i = new ImageIcon(photoURLs.get(current_photo_index + 1)).getImage();
                ImageIcon preview_pic = new ImageIcon(i);
                jLabel2.setIcon(preview_pic);
            } else {
                jLabel2.setIcon(null);
            }
        } else {
            current_photo_index = photo_count;
            jLabel1.setIcon(null);
            jLabel1.setText("Experiment Complete...Thank You!!!");
            Instant now = Instant.now();
            endTime = now.getEpochSecond();
            double duration = (endTime - startTime);
            System.out.println("Start Time : " + startTime);
            System.out.println("Finish Time : " + endTime);
            System.out.println("Total Time of Experiment : " + duration + " seconds");
        }
    }

    /**
     * Moves photos from the photo directory to the specified category folder.
     *
     */
    public static void movePhoto(File dir) {
        try {
            if (current_photo_index < photo_count) {
                URL current_photo = photoURLs.get(current_photo_index);
                File photoFile = new File(current_photo.toURI());
                Path photoLocation = photoFile.toPath();
                Path photoDestination = dir.toPath();
                Files.move(photoLocation, photoDestination.resolve(photoLocation.getFileName()), REPLACE_EXISTING);
            }
        } catch (IOException ex) {
            Logger.getLogger(image_Classification_v2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (URISyntaxException ex) {
            Logger.getLogger(image_Classification_v2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(image_Classification_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(image_Classification_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(image_Classification_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(image_Classification_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                getPhotos();
                if (photoURLs.size() > 0) {
                    Image i = new ImageIcon(photoURLs.get(current_photo_index)).getImage();
                    Image i2 = i.getScaledInstance(500, 500, java.awt.Image.SCALE_SMOOTH);
                    ImageIcon pic1 = new ImageIcon(i2);

                    //Mouse Listener created to notice mouse drag actions.
                    MouseListener listener1 = new MouseListener() {
                        @Override
                        public void mouseClicked(MouseEvent e) {

                        }
                        /*
                         Obtained from:http://zetcode.com/tutorials/javaswingtutorial/draganddrop/
                         Author: Jan Bodner
                         */

                        @Override
                        public void mousePressed(MouseEvent e) {
                            JComponent comp = (JComponent) e.getSource();
                            TransferHandler handler = comp.getTransferHandler();
                            handler.exportAsDrag(comp, e, TransferHandler.COPY);                            
                        }
                        //end of obtained code 
                        
                        @Override
                        public void mouseReleased(MouseEvent e) {

                        }

                        @Override
                        public void mouseEntered(MouseEvent e) {

                        }

                        @Override
                        public void mouseExited(MouseEvent e) {
                        }
                    };

                    new image_Classification_v2().setVisible(true);
                    //Note: Buttons are not instantiated until beyond this point          

                    jLabel1.addMouseListener(listener1);
                    jLabel1.setIcon(pic1);

                    //initial preview pic setting.
                    if (current_photo_index + 1 < photo_count) {
                        i = new ImageIcon(photoURLs.get(current_photo_index + 1)).getImage();
                        ImageIcon preview_pic = new ImageIcon(i);
                        jLabel2.setIcon(preview_pic);
                    } else {
                        jLabel2.setIcon(null);
                    }

                    jButton1.setFocusable(false);
                    jButton2.setFocusable(false);
                    jButton3.setFocusable(false);

                    //intantiating drop listeners so the folder buttons can detect drop actions.
                    dropListener d1 = new dropListener(jButton1);
                    dropListener d2 = new dropListener(jButton2);
                    dropListener d3 = new dropListener(jButton3);

                    //Setting a transfer handler on the picture to enable drag functions.
                    jLabel1.setTransferHandler(new TransferHandler("text"));

                } else {
                    new image_Classification_v2().setVisible(true);
                    jLabel1.setText("No pictures in the folder");
                }
            }
        });
    }
    // The folders in which photos are stored and categorized. Must be changed to the correct directories for program to work.
    static File photoFolder;
    static File categoryFolder1 = new File("C:\\Users\\Muhtasim\\Documents\\U of T\\work\\pictureSorter\\Photos\\clouds");
    static File categoryFolder2 = new File("C:\\Users\\Muhtasim\\Documents\\U of T\\work\\pictureSorter\\Photos\\man_made_object");
    static File categoryFolder3 = new File("C:\\Users\\Muhtasim\\Documents\\U of T\\work\\pictureSorter\\Photos\\visible_text");

    static int photo_count = 0;                           // Number of photos in the photo folder
    static int current_photo_index = 0;                   // The index of the current photo on screen
    static ArrayList<URL> photoURLs = new ArrayList<>();  // List containing the URLs of all the photos in the photo folder
    InputStream copier = null;                            // Copies the onscreen photo into buffer
    OutputStream paster = null;                           // Pastes the onscreen photo into the chosen category folder
    static long startTime;                                // Experiment start time
    static long endTime;                                  // Experiment finish time
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton jButton1;
    private static javax.swing.JButton jButton2;
    private static javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private static javax.swing.JLabel jLabel1;
    private static javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
